buildscript {
    ext {
        springBootVersion = '1.5.17.RELEASE'
    }
    repositories {
        maven {
            url 'http://maven.aliyun.com/nexus/content/groups/public/'
        }
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'

group = 'com.linkinstars'
version = '1.0.2-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    maven {
        url 'http://maven.aliyun.com/nexus/content/groups/public/'
    }
    mavenCentral()
}

// mapper generate: 1. 添加
configurations {
    mybatisGenerator
}

dependencies {

    implementation 'org.projectlombok:lombok:1.18.8'
    annotationProcessor 'org.projectlombok:lombok:1.18.8'

    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-thymeleaf')
    compile group: 'net.sourceforge.nekohtml', name: 'nekohtml', version: '1.9.22'

    //  热部署相关
    compile("org.springframework.boot:spring-boot-devtools")
    
    // 模板引擎
    compile group: 'org.freemarker', name: 'freemarker', version: '2.3.28'

    // 文件上传
    compile group: 'commons-fileupload', name: 'commons-fileupload', version: '1.3.1'
    compile group: 'commons-io', name: 'commons-io', version: '2.4'

    //谷歌官方Java项目广泛依赖的核心库
    compile group: 'com.google.guava', name: 'guava', version: '24.0-jre'

    //compile group: 'org.generateConfig', name: 'generateConfig', version: '3.4.6'

    //json
    compile group: 'com.alibaba', name: 'fastjson', version: '1.2.51'

    testCompile('org.springframework.boot:spring-boot-starter-test')

    // Mapper
    compile "org.mybatis:mybatis:3.4.1"
    compile "org.mybatis.generator:mybatis-generator-core:1.3.2"
    compile 'mysql:mysql-connector-java:5.1.46'
    compile 'com.alibaba:druid:1.1.6'
    compile 'tk.mybatis:mapper-spring-boot-starter:2.1.5'
    compile 'tk.mybatis:mapper:4.0.4'

    // mapper generate: 2. 添加依赖
    mybatisGenerator 'org.mybatis.generator:mybatis-generator-core:1.3.2'
    mybatisGenerator 'mysql:mysql-connector-java:5.1.46'
    mybatisGenerator 'tk.mybatis:mapper:4.0.4'

    // mybatis plus
    compile group: 'com.baomidou', name: 'mybatis-plus-boot-starter', version: '3.3.0'
    compile group: 'com.baomidou', name: 'mybatis-plus-generator', version: '3.3.0'
    compile group: 'org.apache.velocity', name: 'velocity', version: '1.7'
}

// mapper generate: 3. 添加任务
def getDbProperties = {
    def properties = new Properties()
    file("src/main/resources/generateConfig/jdbc.properties").withInputStream { inputStream ->
        properties.load(inputStream)
    }
    properties
}
task mybatisGenerate {
    doLast{
        def properties = getDbProperties()
        ant.properties['targetProject'] = projectDir.path
        ant.properties['driverClass'] = properties.getProperty("jdbc.driverClassName")
        ant.properties['connectionURL'] = properties.getProperty("jdbc.url")
        ant.properties['userId'] = properties.getProperty("jdbc.username")
        ant.properties['password'] = properties.getProperty("jdbc.password")
        ant.properties['src_main_java'] = sourceSets.main.java.srcDirs[0].path
        ant.properties['src_main_resources'] = sourceSets.main.resources.srcDirs[0].path
        ant.properties['modelPackage'] = properties.getProperty("package.model")
        ant.properties['mapperPackage'] = properties.getProperty("package.mapper")
        ant.properties['sqlMapperPackage'] = properties.getProperty("package.xml")
        ant.taskdef(
                name: 'mbgenerator',
                classname: 'org.mybatis.generator.ant.GeneratorAntTask',
                classpath: configurations.mybatisGenerator.asPath
        )
        ant.mbgenerator(overwrite: true,
                configfile: 'src/main/resources/generateConfig/generatorConfig.xml', verbose: true) {
            propertyset {
                propertyref(name: 'targetProject')
                propertyref(name: 'userId')
                propertyref(name: 'driverClass')
                propertyref(name: 'connectionURL')
                propertyref(name: 'password')
                propertyref(name: 'src_main_java')
                propertyref(name: 'src_main_resources')
                propertyref(name: 'modelPackage')
                propertyref(name: 'mapperPackage')
                propertyref(name: 'sqlMapperPackage')
            }
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
} 